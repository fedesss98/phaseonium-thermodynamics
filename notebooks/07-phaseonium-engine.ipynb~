{
 "cells": [
  {
   "cell_type": "code",
   "id": "initial_id",
   "metadata": {
    "collapsed": true,
    "ExecuteTime": {
     "end_time": "2024-07-20T04:31:26.880059Z",
     "start_time": "2024-07-20T04:31:23.361697Z"
    }
   },
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import qutip as qt\n",
    "import tqdm\n",
    "import pickle\n",
    "from pathlib import Path\n",
    "\n",
    "from thermophaseonium.utilities.states import Cavity, Ancilla\n",
    "\n",
    "SAVE_PATH = Path(r\"G:\\UNIPA\\DOTTORATO\\PHASEONIUM\\thermo-phaseonium\\data\")\n",
    "NDIMS = 30\n",
    "SIM_PARAMS = dict(\n",
    "    l0=10.0,\n",
    "    v=1e-2,\n",
    "    alpha0=2*np.pi,\n",
    "    T_c=2,\n",
    "    T_h=5,\n",
    "    timesteps = 1,\n",
    ")"
   ],
   "outputs": [],
   "execution_count": 1
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "# Benchmark Engine: One Cavity\n",
    "A system like this with the dissipative Master Equation defined above can be made using a stream of two-level atoms in a Micromaser-like setup [Sec. 5.7 Quantum Collision Models, Ciccarello et al.].\n",
    "For example, if maser ancillas are prepared with probability $p$ of beign in the excited state, at resonance, the system will evolve as:\n",
    "$$\n",
    "\\dot{\\rho}=(1-p)\\Gamma\\left(a\\rho a^\\dagger-\\frac{1}{2}\\left[a^\\dagger a,\\rho\\right]\\right)+p\\Gamma\\left(a^\\dagger\\rho a - \\frac{1}{2}\\left[a a^\\dagger,\\rho\\right]\\right)\n",
    "$$\n",
    "where $\\Gamma=g^2\\Delta t$ and $g$ is the strength of the cavity-atom interaction.\n",
    "\n",
    "The temperature of this \"bath\" is determined by the population ratio and the energy of the atoms:\n",
    "$$\n",
    "KT = \\frac{\\hbar\\omega_A}{\\log\\left(\\frac{1-p}{p}\\right)}\n",
    "$$\n",
    "\n",
    "For a **Thermal Engine** we need two thermal baths, and so two gases of atoms with different temperatures given by populations $p_c$ and $p_h$."
   ],
   "id": "43b859257f6621c7"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-07-20T04:31:26.899708Z",
     "start_time": "2024-07-20T04:31:26.881064Z"
    }
   },
   "cell_type": "code",
   "source": [
    "class Engine:\n",
    "    def __init__(self, system, l0=10.0, alpha0=2*np.pi, omega_a=None, omega_dissip=1e-2, v=1e-2, timesteps=1, dt=1e-4, **kwargs):\n",
    "        self.ndims = system.dims[0][0]\n",
    "        self.l0 = l0\n",
    "        self.alpha0 = alpha0\n",
    "        self.omega_a = omega_a if omega_a else alpha0 / l0\n",
    "        self.omega_dissip = omega_dissip\n",
    "        self.v = v\n",
    "        self.v_t = v\n",
    "        \n",
    "        self._system = system\n",
    "        \n",
    "        self.t = 0  # Actual time of the machine\n",
    "        self.dt = dt  # Minimum time difference\n",
    "        self.timesteps = timesteps  # Temporal length of each stroke\n",
    "        self.l = l0\n",
    "        \n",
    "    @property\n",
    "    def system(self):\n",
    "        return self._system\n",
    "\n",
    "    @system.setter\n",
    "    def system(self, system):\n",
    "        if system.dims[0][0] != self.ndims:\n",
    "            raise ValueError('The system state has a different number of dimensions')\n",
    "        \n",
    "        self._system = system\n",
    "        \n",
    "    def integrate(self, integrand, ti, tf):\n",
    "        \"\"\"Perform an approximated integration in the interval [ti, tf] in discrete time\"\"\"\n",
    "        steps = int((tf - ti) / self.dt)\n",
    "        integral = 0\n",
    "        for i in np.linspace(ti, tf, steps):\n",
    "            integral += integrand(i) * self.dt\n",
    "        return integral\n",
    "    \n",
    "    def differentiate(self, f, t):\n",
    "        \"\"\"Approximate the derivative of a function f at time t\"\"\"\n",
    "        return (f(t + self.dt) - f(t)) / self.dt\n",
    "\n",
    "    def projective_measurement(self, system):\n",
    "        # SIMPLIFICATION: Take just the diagonal real part of the density matrix\n",
    "        system = qt.Qobj(np.diag(system.diag().real), dims=system.dims)\n",
    "        \n",
    "        return system\n",
    "\n",
    "    @staticmethod\n",
    "    def save(filename='engine.pkl'):\n",
    "        with open(filename, 'wb') as file:\n",
    "            pickle.dump(engine, file)\n",
    "            \n",
    "    def save_system_state(self, filename='system'):\n",
    "        qt.qsave(self.system, filename)\n",
    "        \n",
    "    @staticmethod\n",
    "    def load_system_state(filename='system'):\n",
    "        system = qt.qload(filename)\n",
    "        return system\n",
    "        \n",
    "\n",
    "        \n",
    "\n",
    "class MaserEngine(Engine):\n",
    "    def __init__(self, *args, p_c=0.2, p_h=0.8, **kwargs):\n",
    "        super().__init__(*args, **kwargs)\n",
    "        self.p_c = p_c\n",
    "        self.p_h = p_h\n",
    "        self.states = [(self.energy(), self.alpha0 / self.l)]\n",
    "                \n",
    "    def hc(self):\n",
    "        \"\"\"Hamiltonian of the cavity\"\"\"\n",
    "        omega_c = self.alpha0 / self.l\n",
    "        return omega_c * ( qt.create(self.ndims) * qt.destroy(self.ndims) + 1/2)\n",
    "    \n",
    "    def hamiltonian(self):\n",
    "        \"\"\"In this Hamiltonian the time dependance is implicit in the variable self.l\"\"\"\n",
    "        return self.hc()\n",
    "    \n",
    "    def dissipative_meq(self, system, p):\n",
    "        def commutator(rho, hamiltonian):\n",
    "            return -1j * (hamiltonian * rho - rho * hamiltonian)\n",
    "        \n",
    "        def dissipator(rho, p):\n",
    "            ap = qt.create(self.ndims)\n",
    "            am = qt.destroy(self.ndims)\n",
    "            up_term = ap * rho * am - 1/2 * ( am * ap * rho + rho * am * ap)\n",
    "            down_term = am * rho * ap - 1/2 * ( ap * am * rho + rho * ap * am)\n",
    "            return self.omega_dissip * p * up_term + self.omega_dissip * (1 - p) * down_term\n",
    "        \n",
    "        return commutator(system, self.hamiltonian()) + dissipator(system, p)\n",
    "    \n",
    "    def energy(self):\n",
    "        return qt.expect(self.hamiltonian(), self.system)\n",
    "    \n",
    "    def plot_length_vs_energy(self, start_from=0):\n",
    "        fig, ax = plt.subplots(figsize=(5, 5))\n",
    "        y = np.array(self.states)[start_from:, 0] \n",
    "        x = np.array(self.states)[start_from:, 1]\n",
    "        ax.plot(x, y)\n",
    "        ax.set_xlabel('$\\omega$')\n",
    "        ax.set_ylabel('$E\\;\\;$', rotation=0)\n",
    "        plt.show()\n",
    "\n",
    "\n",
    "class OttoEngine(MaserEngine):\n",
    "    def __init__(self, *args, **kwargs):\n",
    "        super().__init__(*args, **kwargs)\n",
    "    \n",
    "    def adiabatic_stroke(self, system):\n",
    "        steps = int(1 / self.dt)\n",
    "        \n",
    "        for i in np.linspace(0, self.timesteps, steps):\n",
    "            # Move the piston\n",
    "            self.l = self.l + self.v_t * self.dt\n",
    "            exp = -1j * self.hamiltonian() * self.dt\n",
    "            u = exp.expm()\n",
    "            system = u * system * u.dag()\n",
    "\n",
    "        self.t += 1\n",
    "        return self.projective_measurement(system)\n",
    "    \n",
    "    def isochoric_stroke(self, system, p):\n",
    "        \"\"\"This is a heating stroke with the piston (volume) fixed\"\"\"\n",
    "        steps = int(1 / self.dt)\n",
    "        # Here the piston is fixed\n",
    "        for i in np.linspace(0, self.timesteps, steps):\n",
    "            drdt = self.dissipative_meq(system, p)\n",
    "            system = system + drdt * self.dt\n",
    "            \n",
    "        self.t += 1\n",
    "        return self.projective_measurement(system)\n",
    "    \n",
    "    def cycle(self):\n",
    "        \"\"\"One pass of the Otto cycle\"\"\"\n",
    "        # 1) Adiabatic Compression\n",
    "        self.v_t = -1 * abs(self.v)\n",
    "        self.system = self.adiabatic_stroke(self.system)\n",
    "        self.states.append((self.energy(), self.alpha0 / self.l))\n",
    "        \n",
    "        # 2) Isochoric Heating\n",
    "        self.v_t = 0\n",
    "        self.system = self.isochoric_stroke(self.system, self.p_h)\n",
    "        self.states.append((self.energy(), self.alpha0 / self.l))\n",
    "        \n",
    "        # 3) Adiabatic Expansion\n",
    "        self.v_t = abs(self.v)\n",
    "        self.system = self.adiabatic_stroke(self.system)\n",
    "        self.states.append((self.energy(), self.alpha0 / self.l))\n",
    "        \n",
    "        # 4) Isochoric Cooling\n",
    "        self.v_t = 0\n",
    "        self.system = self.isochoric_stroke(self.system, self.p_c)\n",
    "        self.states.append((self.energy(), self.alpha0 / self.l))\n",
    "        \n",
    "        return self.system\n",
    "    \n",
    "    \n",
    "class CarnotEngine(MaserEngine):\n",
    "    def __init__(self, **kwargs):\n",
    "        super().__init__(**kwargs)\n",
    "        \n",
    "    def adiabatic_stroke(self, system):\n",
    "        steps = int(1 / self.dt)\n",
    "        \n",
    "        for i in np.linspace(0, self.timesteps, steps):\n",
    "            # Move the piston\n",
    "            self.l = self.l + self.v_t * self.dt\n",
    "            exp = -1j * self.hamiltonian() * self.dt\n",
    "            u = exp.expm()\n",
    "            system = u * system * u.dag()\n",
    "\n",
    "        self.t += 1\n",
    "        return self.projective_measurement(system)\n",
    "    \n",
    "    def isoparametric_stroke(self, system, n_th):\n",
    "        def commutator(rho, hamiltonian):\n",
    "            return -1j * (hamiltonian * rho - rho * hamiltonian)\n",
    "        \n",
    "        def dissipator(rho, n):\n",
    "            ap = qt.create(self.ndims)\n",
    "            am = qt.destroy(self.ndims)\n",
    "            up_term = ap * rho * am - 1/2 * ( am * ap * rho + rho * am * ap)\n",
    "            down_term = am * rho * ap - 1/2 * ( ap * am * rho + rho * ap * am)\n",
    "            return self.omega_dissip * n * up_term + self.omega_dissip * (n + 1) * down_term\n",
    "        \n",
    "        steps = int(1 / self.dt)\n",
    "        # Here the piston moves while the system is in contact with the thermal bath\n",
    "        for i in np.linspace(0, self.timesteps, steps):\n",
    "            # Move the piston\n",
    "            self.l = self.l + self.v_t * self.dt\n",
    "            drdt = commutator(system, self.hamiltonian()) + dissipator(system, n_th)\n",
    "            system = system + drdt * self.dt\n",
    "            \n",
    "        self.t += 1\n",
    "        return self.projective_measurement(system)\n",
    "    \n",
    "    def cycle(self):\n",
    "        \"\"\"One pass of the Carnot cycle\"\"\"\n",
    "        # 1) Adiabatic Compression\n",
    "        self.v_t = -1 * abs(self.v)\n",
    "        self.system = self.adiabatic_stroke(self.system)\n",
    "        self.states.append((self.energy(), self.alpha0 / self.l))\n",
    "        \n",
    "        # 2) Isoparametric Expansion\n",
    "        self.v_t = abs(self.v)\n",
    "        self.system = self.isoparametric_stroke(self.system, self.n_h)\n",
    "        self.states.append((self.energy(), self.alpha0 / self.l))\n",
    "        \n",
    "        # 3) Adiabatic Expansion\n",
    "        self.v_t = abs(self.v)\n",
    "        self.system = self.adiabatic_stroke(self.system)\n",
    "        self.states.append((self.energy(), self.alpha0 / self.l))\n",
    "        \n",
    "        # 4) Isoparametric Compression\n",
    "        self.v_t = -1 * abs(self.v)\n",
    "        self.system = self.isoparametric_stroke(self.system, self.n_c)\n",
    "        self.states.append((self.energy(), self.alpha0 / self.l))\n",
    "        \n",
    "        return self.system\n",
    "    \n"
   ],
   "id": "c81984df9069931b",
   "outputs": [],
   "execution_count": 2
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "### Setup the Bath",
   "id": "6c1ceb86eb70b8d3"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-07-20T04:31:26.905216Z",
     "start_time": "2024-07-20T04:31:26.900711Z"
    }
   },
   "cell_type": "code",
   "source": [
    "def boltzmann_population(omega, temp):\n",
    "    return 1 / (np.exp(omega / temp) + 1)\n",
    "\n",
    "starting_len = SIM_PARAMS['l0']\n",
    "max_len =  starting_len + SIM_PARAMS['v'] * SIM_PARAMS['timesteps']\n",
    "min_len =  starting_len - SIM_PARAMS['v'] * SIM_PARAMS['timesteps']\n",
    "\n",
    "omega_c = SIM_PARAMS['alpha0'] / max_len\n",
    "omega_h = SIM_PARAMS['alpha0'] / min_len\n",
    "\n",
    "p_c = boltzmann_population(omega_c, SIM_PARAMS['T_c'])\n",
    "p_h = boltzmann_population(omega_h, SIM_PARAMS['T_h'])"
   ],
   "id": "e239c56ea4c56836",
   "outputs": [],
   "execution_count": 3
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-07-20T04:31:26.910392Z",
     "start_time": "2024-07-20T04:31:26.906218Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# system = qt.thermal_dm(NDIMS, 3)\n",
    "system = qt.qload('maser_engine_01') \n",
    "\n",
    "engine = OttoEngine(system, p_c=p_c, p_h=p_h, **SIM_PARAMS)"
   ],
   "id": "dfd48bc19126b708",
   "outputs": [],
   "execution_count": 4
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-07-20T06:00:20.517430Z",
     "start_time": "2024-07-20T04:31:26.911394Z"
    }
   },
   "cell_type": "code",
   "source": [
    "print(engine.energy())\n",
    "for c in tqdm.tqdm(range(500)):\n",
    "    engine.cycle()\n",
    "    if c % 50 == 0:\n",
    "        print(engine.energy())\n",
    "        \n",
    "print(engine.energy())"
   ],
   "id": "e65edd781f4edc1f",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.8318508435209706\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  0%|          | 1/500 [00:10<1:31:18, 10.98s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.8318904838451093\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 10%|█         | 51/500 [09:32<1:23:54, 11.21s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.8337617211762423\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 20%|██        | 101/500 [18:41<1:10:57, 10.67s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.8354316245416045\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 30%|███       | 151/500 [27:36<1:02:28, 10.74s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.836921852177237\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 40%|████      | 201/500 [36:23<52:30, 10.54s/it]  "
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.838251733419185\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 50%|█████     | 251/500 [45:10<43:49, 10.56s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.839438518905264\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 60%|██████    | 301/500 [53:57<35:05, 10.58s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.8404976039497747\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 70%|███████   | 351/500 [1:02:43<26:02, 10.49s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.8414427279547354\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 80%|████████  | 401/500 [1:11:30<17:32, 10.64s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.8422861524178975\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 90%|█████████ | 451/500 [1:20:16<08:33, 10.47s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.8430388198295713\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 500/500 [1:28:53<00:00, 10.67s/it]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.8436977977242894\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "execution_count": 5
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-07-20T06:00:20.740121Z",
     "start_time": "2024-07-20T06:00:20.518432Z"
    }
   },
   "cell_type": "code",
   "source": "engine.plot_length_vs_energy(start_from=-25)",
   "id": "4be485c0be275f86",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 500x500 with 1 Axes>"
      ],
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "execution_count": 6
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-07-20T06:00:20.744250Z",
     "start_time": "2024-07-20T06:00:20.740121Z"
    }
   },
   "cell_type": "code",
   "source": [
    "engine.save_system_state('maser_engine_01')\n",
    "with open(\"..\\data\\experiment_01.pkl\", \"wb\") as f:\n",
    "    pickle.dump(SIM_PARAMS, f)"
   ],
   "id": "e8a8b3b0cda52785",
   "outputs": [],
   "execution_count": 7
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-07-20T06:00:20.747102Z",
     "start_time": "2024-07-20T06:00:20.745252Z"
    }
   },
   "cell_type": "code",
   "source": " ",
   "id": "7e0ee5e5f4f5c2fa",
   "outputs": [],
   "execution_count": 7
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
